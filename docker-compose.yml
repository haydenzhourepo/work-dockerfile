networks:
  backend:
    driver: ${NETWORKS_DRIVER}

services:
  ### MySQL ################################################
  mysql:
    build:
      context: ./mysql
      args:
        - MYSQL_VERSION=${MYSQL_VERSION}
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - TZ=${WORKSPACE_TIMEZONE}
    volumes:
      - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
    ports:
      - "${MYSQL_PORT}:3306"

  ### Redis ################################################
  redis:
    build: ./redis
    volumes:
      - ${DATA_PATH_HOST}/redis:/data
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - backend

  ### REDISWEBUI ################################################
  redis-webui:
    build:
      context: ./redis-webui
    environment:
      - ADMIN_USER=${REDIS_WEBUI_USERNAME}
      - ADMIN_PASS=${REDIS_WEBUI_PASSWORD}
      - REDIS_1_HOST=${REDIS_WEBUI_CONNECT_HOST}
      - REDIS_1_PORT=${REDIS_WEBUI_CONNECT_PORT}
      - REDIS_1_AUTH=${REDIS_WEBUI_CONNECT_AUTH}
    networks:
      - backend
    ports:
      - "${REDIS_WEBUI_PORT}:80"
    depends_on:
      - redis

  ### PostgreSQL ###########################################
  postgres:
    build:
      context: ./postgres
      args:
        - POSTGRES_VERSION=${POSTGRES_VERSION}
    volumes:
      - ${DATA_PATH_HOST}/postgres:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - backend

  ### ZooKeeper #########################################
  zookeeper:
    build: ./zookeeper
    volumes:
      - ${DATA_PATH_HOST}/zookeeper/data:/data
      - ${DATA_PATH_HOST}/zookeeper/datalog:/datalog
    ports:
      - "${ZOOKEEPER_PORT}:2181"
    networks:
      - backend

  ### Kafka #########################################
  kafka:
    build:
      context: ./kafka
      args:
        - KAFKA_VERSION=${KAFKA_VERSION}
    volumes:
      - ${DATA_PATH_HOST}/data/kafka:/bitnami/kafka
    hostname: kafka
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093,INTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:${KAFKA_PORT},INTERNAL://kafka:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    ports:
      - ${KAFKA_PORT}:9092
    networks:
      - backend

  ### KAFKAUI #########################################
  kafkaui:
    image: provectuslabs/kafka-ui
    ports:
      - ${KAFKAUI_PORT}:8080
    environment:
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9094
      AUTH_TYPE: LOGIN_FORM
      SPRING_SECURITY_USER_NAME: ${KAFKAUI_AUTH_USER}
      SPRING_SECURITY_USER_PASSWORD: ${KAFKAUI_AUTH_PASS}
    depends_on:
      - kafka
    networks:
      - backend

  ### ClickHouse #########################################
  clickhouse:
    build:
      context: ./clickhouse
      args:
        - CLICKHOUSE_VERSION=${CLICKHOUSE_VERSION}
    volumes:
      - ${DATA_PATH_HOST}/clickhouse/data:/var/lib/clickhouse
      - ${CLICKHOUSE_USERS_CUSTOM_CONFIG}:/etc/clickhouse-server/users.xml
    ports:
      - "${CLICKHOUSE_HTTP_PORT}:8123"
      - "${CLICKHOUSE_CLIENT_PORT}:9000"
      - "${CLICKHOUSE_NATIVE_PORT}:9009"
    networks:
      - backend

  ### NGINX #########################################
  nginx:
    build:
      context: ./nginx
      args:
        - NGINX_VERSION=${NGINX_VERSION}
    volumes:
      - ${APP_CODE_PATH_HOST}:/var/www
      - /logs:/var/log/nginx
      - ./nginx/sites:/etc/nginx/sites-available
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "9999:9999"
      - "443:443"
    networks:
      - backend

  ### MongoDB ##############################################
  mongo:
    build:
      context: ./mongo
      args:
        - MONGO_VERSION=${MONGO_VERSION}
    ports:
      - "${MONGODB_PORT}:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    volumes:
      - ${DATA_PATH_HOST}/mongo:/data/db
      - ${DATA_PATH_HOST}/mongo_config:/data/configdb
    networks:
      - backend

  ### PolarisMesh ##############################################
  polarismesh:
    build: ./polarismesh
    ports:
      - "${POLARIS_EUREKA_PORT}:8761"
      - "${POLARIS_OPEN_API_PORT}:8090"
      - "${POLARIS_SERVICE_GRPC_PORT}:8091"
      - "${POLARIS_CONFIG_GRPC_PORT}:8093"
      - "${POLARIS_PROMETHEUS_SD_PORT}:9000"
      - "${POLARIS_XDSV3_PORT}:15010"
      - "${POLARIS_CONSOLE_PORT}:8080"
      - "${PROMETHEUS_PORT}:9090"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    volumes:
      - ${DATA_PATH_HOST}/mongo:/data/db
      - ${DATA_PATH_HOST}/mongo_config:/data/configdb
    networks:
      - backend

  ### ApachePulsar ##############################################
  pulsar:
    build:
      context: ./pulsar
      args:
        - PULSAR_VERSION=${PULSAR_VERSION}
    ports:
      - "${PULSAR_HTTP_SERVICE_PORT}:8080"
      - "${PULSAR_MESSAGE_SERVICE_PORT}:6650"
    volumes:
      - ${DATA_PATH_HOST}/pulsar/data:/pulsar/data
      # - ${DATA_PATH_HOST}/pulsar/conf:/pulsar/conf
    networks:
      - backend

  ### MSSQL ################################################
  mssql:
    build:
      context: ./mssql
      args:
        - MSSQL_VERSION=${MSSQL_VERSION}
    environment:
      - MSSQL_PID=Express
      - MSSQL_DATABASE=${MSSQL_DATABASE}
      - SA_PASSWORD=${MSSQL_PASSWORD}
      - ACCEPT_EULA=Y
    volumes:
      - ${DATA_PATH_HOST}/mssql:/var/opt/mssql
    ports:
      - "${MSSQL_PORT}:1433"
    networks:
      - backend

  ### Minio ################################################
  minio:
    build: ./minio
    volumes:
      - ${DATA_PATH_HOST}/minio/data:/export
      - ${DATA_PATH_HOST}/minio/config:/root/.minio
    ports:
      - "${MINIO_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    networks:
      - backend

  ### Jenkins ################################################
  jenkins:
    build:
      context: ./jenkins
      args:
        - JENKINS_VERSION=${JENKINS_VERSION}
    volumes:
      - ${DATA_PATH_HOST}/jenkins/jenkins_home:/var/jenkins_home
    ports:
      - ${JENKINS_PORT}:8080

  ### elasticsearch ################################################
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
    volumes:
      - ${DATA_PATH_HOST}/elasticsearch/data:/usr/share/elasticsearch/data
        # - ${DATA_PATH_HOST}/elasticsearch/config:/usr/share/elasticsearch/config
      - ${DATA_PATH_HOST}/elasticsearch/plugins:/usr/share/elasticsearch/log
    environment:
      - "cluster.name=elasticsearch"
      - "discovery.type=single-node"
    ports:
      - 9200:9200
    networks:
      - backend

  ### kibana ################################################
  kibana:
    image: docker.elastic.co/kibana/kibana:7.10.1
    ports:
      - 5601:5601
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    networks:
      - backend

  ### HANA ################################################
  hana:
    build:
      context: ./hana
      args:
        - HANA_VERSION=${HANA_VERSION}
    # restart: "unless-stopped"
    platform: linux/amd64
    hostname: c2726800ba78
    ports:
      - 39013:39013
      - 39017:39017
      - 39041-39045:39041-39045
      - 1128-1129:1128-1129
      - 59013-59014:59013-59014
    ulimits:
      nofile:
        soft: 1048576
        hard: 1048576
    # sysctls:
    # kernel.shmmax: 1073741824
    # kernel.shmmni: 524288
    # kernel.shmall: 8388608
    # net.ipv4.ip_local_port_range: "40000 60999"
    volumes:
      - ${DATA_PATH_HOST}/hana/data:/hana/mounts
    command: "--master-password Hayden123 --agree-to-sap-license"
    networks:
      - backend

  ### GITEA ################################################
  gitea:
    image: docker.io/gitea/gitea:1.22.6
    container_name: gitea
    environment:
      - USER_UID=1000
      - USER_GID=1000
      - GITEA__database__DB_TYPE=postgres
      - GITEA__database__HOST=db:5432
      - GITEA__database__NAME=gitea
      - GITEA__database__USER=gitea
      - GITEA__database__PASSWD=gitea
    restart: always
    volumes:
      - ${DATA_PATH_HOST}/gitea:/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "3000:3000"
      - "222:22"

  ### RABBITMQ ################################################
  rabbitmq:
    image: rabbitmq:${RABBITMQ_VERSION}
    ports:
      - "${RABBITMQ_LISTEN_PORT}:5672"
      - "${RABBITMQ_MANAGE_PORT}:15672"
    volumes:
      - ${DATA_PATH_HOST}/rabbitmq/data/:/var/lib/rabbitmq/
      - ${DATA_PATH_HOST}/rabbitmq/log/:/var/log/rabbitmq/
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
