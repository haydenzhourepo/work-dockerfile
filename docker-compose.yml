version: "3.5"

networks:
  backend:
    driver: ${NETWORKS_DRIVER}

services:
  ### MySQL ################################################
  mysql:
    build:
      context: ./mysql
      args:
        - MYSQL_VERSION=${MYSQL_VERSION}
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - TZ=${WORKSPACE_TIMEZONE}
    volumes:
      - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
    ports:
      - "${MYSQL_PORT}:3306"

  ### Redis ################################################
  redis:
    build: ./redis
    volumes:
      - ${DATA_PATH_HOST}/redis:/data
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - backend

  ### REDISWEBUI ################################################
  redis-webui:
    build:
      context: ./redis-webui
    environment:
      - ADMIN_USER=${REDIS_WEBUI_USERNAME}
      - ADMIN_PASS=${REDIS_WEBUI_PASSWORD}
      - REDIS_1_HOST=${REDIS_WEBUI_CONNECT_HOST}
      - REDIS_1_PORT=${REDIS_WEBUI_CONNECT_PORT}
      - REDIS_1_AUTH=${REDIS_WEBUI_CONNECT_AUTH}
    networks:
      - backend
    ports:
      - "${REDIS_WEBUI_PORT}:80"
    depends_on:
      - redis

  ### PostgreSQL ###########################################
  postgres:
    build:
      context: ./postgres
      args:
        - POSTGRES_VERSION=${POSTGRES_VERSION}
    volumes:
      - ${DATA_PATH_HOST}/postgres:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - backend

  ### ZooKeeper #########################################
  zookeeper:
    build: ./zookeeper
    volumes:
      - ${DATA_PATH_HOST}/zookeeper/data:/data
      - ${DATA_PATH_HOST}/zookeeper/datalog:/datalog
    ports:
      - "${ZOOKEEPER_PORT}:2181"
    networks:
      - backend

  ### Kafka #########################################
  kafka:
    build:
      context: ./kafka
    volumes:
      - ${DATA_PATH_HOST}/data/kafka-logs:/data/kafka-logs
      - ${DATA_PATH_HOST}/data/zookeeper:/data/zookeeper
    hostname: kafka
    ports:
      - 9092:9092
    depends_on:
      - zookeeper
    networks:
      - backend

  ### kafdrop #########################################
  kafdrop:
    image: obsidiandynamics/kafdrop
    ports:
      - 9001:9000
    environment:
      KAFKA_BROKERCONNECT: kafka:19092
      SCHEMAREGISTRY_AUTH: hayden:15007116
    depends_on:
      - kafka
    networks:
      - backend

  ### ClickHouse #########################################
  clickhouse:
    build:
      context: ./clickhouse
      args:
        - CLICKHOUSE_VERSION=${CLICKHOUSE_VERSION}
    volumes:
      - ${DATA_PATH_HOST}/clickhouse/data:/var/lib/clickhouse
      - ${CLICKHOUSE_USERS_CUSTOM_CONFIG}:/etc/clickhouse-server/users.xml
    ports:
      - "${CLICKHOUSE_HTTP_PORT}:8123"
      - "${CLICKHOUSE_CLIENT_PORT}:9000"
      - "${CLICKHOUSE_NATIVE_PORT}:9009"
    networks:
      - backend

  ### NGINX #########################################
  nginx:
    build:
      context: ./nginx
      args:
        - NGINX_VERSION=${NGINX_VERSION}
    volumes:
      - ${APP_CODE_PATH_HOST}:/var/www
      - /logs:/var/log/nginx
      - ./nginx/sites:/etc/nginx/sites-available
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "9999:9999"
      - "443:443"
    networks:
      - backend

  ### MongoDB ##############################################
  mongo:
    build: ./mongo
    ports:
      - "${MONGODB_PORT}:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    volumes:
      - ${DATA_PATH_HOST}/mongo:/data/db
      - ${DATA_PATH_HOST}/mongo_config:/data/configdb
    networks:
      - backend

  ### PolarisMesh ##############################################
  polarismesh:
    build: ./polarismesh
    ports:
      - "${POLARIS_EUREKA_PORT}:8761"
      - "${POLARIS_OPEN_API_PORT}:8090"
      - "${POLARIS_SERVICE_GRPC_PORT}:8091"
      - "${POLARIS_CONFIG_GRPC_PORT}:8093"
      - "${POLARIS_PROMETHEUS_SD_PORT}:9000"
      - "${POLARIS_XDSV3_PORT}:15010"
      - "${POLARIS_CONSOLE_PORT}:8080"
      - "${PROMETHEUS_PORT}:9090"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    volumes:
      - ${DATA_PATH_HOST}/mongo:/data/db
      - ${DATA_PATH_HOST}/mongo_config:/data/configdb
    networks:
      - backend

  ### ApachePulsar ##############################################
  pulsar:
    build:
      context: ./pulsar
      args:
        - PULSAR_VERSION=${PULSAR_VERSION}
    ports:
      - "${PULSAR_HTTP_SERVICE_PORT}:8080"
      - "${PULSAR_MESSAGE_SERVICE_PORT}:6650"
    volumes:
      - ${DATA_PATH_HOST}/pulsar/data:/pulsar/data
      # - ${DATA_PATH_HOST}/pulsar/conf:/pulsar/conf
    networks:
      - backend

  ### MSSQL ################################################
  mssql:
    build:
      context: ./mssql
      args:
        - MSSQL_VERSION=${MSSQL_VERSION}
    environment:
      - MSSQL_PID=Express
      - MSSQL_DATABASE=${MSSQL_DATABASE}
      - SA_PASSWORD=${MSSQL_PASSWORD}
      - ACCEPT_EULA=Y
    volumes:
      - ${DATA_PATH_HOST}/mssql:/var/opt/mssql
    ports:
      - "${MSSQL_PORT}:1433"
    networks:
      - backend
